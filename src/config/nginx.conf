# main (root) context

# we can tell how many processes should nginx spawn. Best practice is one per CPU (or auto)
worker_processes auto;

# custom pid file location
pid /var/run/nginx.pid;

# load a dynamic module
# load_module modules/ngx_http_image_filter_module.so; - for some reason relative path is not working
load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events {
  # we can configure max connections for each process.
  worker_connections 1024;
}

# http context
http {

  # Buffer size for POST submissions
  client_body_buffer_size 10k;
  client_max_body_size 8m;

  # Buffer size for header Headers
  client_header_buffer_size 1k;

  # Max time to receive client body headers/body
  client_body_timeout 12;
  client_header_timeout 12;

  # Max time to keep a connetion open for
  keepalive_timeout 15;

  # Max time for the clieht accept/receive a response
  send_timeout 10;

  # Skip buffering for static files
  sendfile on;

  # Optimise sendfile packets
  tcp_nopush on;

  # gzip
  gzip on;
  gzip_comp_level 3;
  gzip_types text/css text/javascript;

  # configure microcache (fastcgi)
  fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
  fastcgi_cache_key "$scheme$request_method$host$request_uri";
  add_header X-Cache $upstream_cache_status;

  # declate a global variable
  map $host $serverName {
    default 'nginx-learn.com www.nginx-learn.com';
  }

  # define request zone - requests rate limiting 
  limit_req_zone $request_uri zone=MYZONE:10m rate=10r/s;

  # group of servers. Useful for load balancing
  upstream external_servers {
    # balancing options:
    # ip_hash; # sticky session option. Each ip goes to its one server. Helps with logged in users.
    # least_conn; # forward to less busy server, which has less connections.
    server https://www.ynet.co.il/;
    server https://www.google.com/;
    server https://www.linkedin.com/;
  }

  # virtual server (we can have multiple server blocks listening on multiple ports)
  server {
    
    # port to listen on, redirect to https
    listen 80;
    server_name $serverName;
    return 301 https://$host$request_uri;
  }

  server {

    # port, https, ssl sertificate, http2
    listen 443 ssl http2;
    ssl_certificate /etc/nginx/ssl/self.crt;
    ssl_certificate_key /etc/nginx/ssl/self.key;

    # add more security

    # add a header to disable embedding in iframe
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    # set modern ssl version(tls) and encryption
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

    # optimise cipher suits
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDH+AESGM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    # ssl sessions
    ssl_session_cache shared:SSL:40m;
    ssl_session_timeout 4h;
    ssl_session_tickets on;

    # domain name (can be ip address as well). add to hosts file to test
    server_name $serverName;

    # Files to display if only the domain name is specified in the address
    index index.php index.html index.htm;

    # include most used mime types so for example, style.css will be applied as a css file and not text
    include mime.types;

    # don't send the server name in headers
    server_tokens off;

    # static folder to serve
    root /www;

    # location
    # location prioritizing
    # 1. Exact match
    # 2. Preferetial match
    # 3. Regex match (has same priority as preference match, whoever comes last wins
    # 4. Regular match 

    # prefix match
    location /greet {
      return 200 'Hello from /greet prefix match location';
    }

    # exact match
    location = /greet {
      return 200 'Hello from /greet exact match location';
    }

    # regex match - sensitive
    location ~ /greet[0-9] {
      return 200 'Hello from /greet[0-9] regex location';
    }

    # regex match - insensitive
    location ~* /greet[0-9] {
      return 200 'Hello from /greet[0-9] regex insensitive location';
    }

    # preferential match
    location ^~ /Greet {
      return 200 'Hello from /greet preferential match';
    }

    # variables
    # we have builtin variables and custom variables
  
    location /builtin_variables {
      return 200 'Host: $host\n Uri: $uri\n Query args: $args\nSingle query arg: $arg_name';
    }

    set $weekend 'No';
    if ($date_local ~ 'Saturday|Sunday') {
      set $weekend 'Yes';
    }
    
    location /custom_variables {
      return 200 'Is weekend: $weekend\nThe date is: $date_local';
    }

    # rewrites and redirects
    # redirects change browser url and run the corresponsing location block
    # rewrites do not! change browser url and run the corresponsing location block

    rewrite ^/user/(\w+) /greet/$1;
    # we can add an optional "last" paramfeter, to stop additional redirects. For example, "rewrite ^/user/(\w+) /greet/$1 last"

    location /redirect {
      return 307;
    }

    # try_files and named locations
    # try_files serves files according to the arguments provided, while fallback to the last argument if not found.
    # try_files can be put on the server level, or inside a location block/
    # for example, try_files Dockerfile tsconfig.json /redirect will always serve the dockerfile no matter what
    # limit requests to this location according to the zone configuration, and allow queue of 5 items
    location / {
      limit_req zone=MYZONE burst=5 nodelay;
      try_files $uri $uri/ @not_found;
    }

    location @not_found {
      return 404 "This is a 404 error page (named location)";
    }

    # logs
    # we have access to the access.log and error.log files (see Dockerfile for details).
    # we can create custom log entries by using "access_log" and "error_log" directives. We can also disable logs for a particular route.

    location /secure {
      access_log /var/log/nginx/secure.access.log;
      return 200 "Write to custom log file";
    }

    location /nologs {
      access_log off;
      return 200 "disable logs in this route";
    }

    # inheritance
    # we can use inheritance and override directives.
    # For example, we can declare basic logging at the top, and then desable it for some particular routes.

    set $nocache 0;
    if ($request_method = POST) {
      set $nocache 1;
    }

    # passing php requests to php-fpm service (fastcgi).
    # fastcgi is a protocol about binary data exchange, in our case between the app and php service.
    # pass the data to php socket via fastcgi
    location ~ \.php$ {
      include fastcgi.conf;
      fastcgi_pass unix:/run/php/php7.1-fpm.sock;

      # enable cache
      fastcgi_cache ZONE_1;
      fastcgi_cache_valid 200 404 60m;
      fastcgi_cache_bypass $nocache;
      fastcgi_no_cache $nocache;
    }

    # image filter dynamic module.
    # dynamic modules are added in runtime
    location = /nginx.png {
      image_filter rotate 180;
    }

    # Adding caching headers
    location ~* \.(css|js|jpg|png)$ {
      access_log off;
      add_header Cache-control public;
      add_header Pragma public;
      add_header Vary Accept-Encoding;
      expires 1m;
    }

    # server push
    location = /index.html {
      http2_push /style.css;
      http2_push /nginx.png;
    }

    # password-protected route
    location /password {
      auth_basic "Please enter your password";
      auth_basic_user_file /etc/nginx/.htpasswd;
    }

    # reverse proxy
    location /webapp/ {
      # proxy_pass http://host.docker.internal:8080; # works over curl within the container, but not here...
      proxy_pass https://www.ynet.co.il/;
      add_header client_header_only client_header_only_val;
      proxy_set_header proxy_server_header proxy_server_header_val;
    }

    # load balancer
    location /loadbalancer {
      proxy_pass external_servers;
    }
  }

}